// x64 schema version v0.2
// Automatically generated by Antecedent Morph Configurator

/ {
    behaviors {
        // Mod-Morphs
        // Base layer
        // NE
        amx64neagm: amx64neagm {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&amx64nea>, <&amx64neg>;
            mods = <(MOD_LGUI)>;
        };
        amx64necagm: amx64necagm {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&amx64nec>, <&amx64neagm>;
            mods = <(MOD_LALT|MOD_LGUI)>;
        };
        amx64nem: amx64nem {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&amx64ne>, <&amx64necagm>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };
        // E
        amx64eagm: amx64eagm {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&amx64ea>, <&amx64eg>;
            mods = <(MOD_LGUI)>;
        };
        amx64ecagm: amx64ecagm {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&amx64ec>, <&amx64eagm>;
            mods = <(MOD_LALT|MOD_LGUI)>;
        };
        amx64em: amx64em {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&amx64e>, <&amx64ecagm>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };
        // SE
        amx64seagm: amx64seagm {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&amx64sea>, <&amx64seg>;
            mods = <(MOD_LGUI)>;
        };
        amx64secagm: amx64secagm {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&amx64sec>, <&amx64seagm>;
            mods = <(MOD_LALT|MOD_LGUI)>;
        };
        amx64sem: amx64sem {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&amx64se>, <&amx64secagm>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
        };
        // NW
        amx64nwagm: amx64nwagm {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&amx64nwa>, <&amx64nwg>;
            mods = <(MOD_RGUI)>;
        };
        amx64nwcagm: amx64nwcagm {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&amx64nwc>, <&amx64nwagm>;
            mods = <(MOD_RALT|MOD_RGUI)>;
        };
        amx64nwm: amx64nwm {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&amx64nw>, <&amx64nwcagm>;
            mods = <(MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };
        // W
        amx64wagm: amx64wagm {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&amx64wa>, <&amx64wg>;
            mods = <(MOD_RGUI)>;
        };
        amx64wcagm: amx64wcagm {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&amx64wc>, <&amx64wagm>;
            mods = <(MOD_RALT|MOD_RGUI)>;
        };
        amx64wm: amx64wm {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&amx64w>, <&amx64wcagm>;
            mods = <(MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };
        // SW
        amx64swagm: amx64swagm {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&amx64swa>, <&amx64swg>;
            mods = <(MOD_RGUI)>;
        };
        amx64swcagm: amx64swcagm {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&amx64swc>, <&amx64swagm>;
            mods = <(MOD_RALT|MOD_RGUI)>;
        };
        amx64swm: amx64swm {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&amx64sw>, <&amx64swcagm>;
            mods = <(MOD_RCTL|MOD_RALT|MOD_RGUI)>;
        };
        // Antecedent Morphs
        amx64ne: am_x64_ne {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_NE";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&amx64_and>, <&amx64_byte>, <&amx64_dword>, <&amx64_pop>, <&amx64_qword>, <&amx64_section>, <&amx64_word>, <&amx64_xor>;
            antecedents = <A B D P Q S W X>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64nec: am_x64_ne_c {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_NE_C";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&amx64_section_data>;
            antecedents = <S>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64nea: am_x64_ne_a {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_NE_A";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&amx64_section_text>;
            antecedents = <S>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64neg: am_x64_ne_g {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_NE_G";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&amx64_section_bss>;
            antecedents = <S>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64e: am_x64_e {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_E";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&amx64_add>, <&amx64_call>, <&amx64_dec>, <&amx64_global>, <&amx64_mulsd>, <&amx64_push>, <&amx64_resb>, <&amx64_sub>, <&amx64_0xff>;
            antecedents = <A C D G M P R S N0>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64ec: am_x64_e_c {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_E_C";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&amx64_addsd>, <&amx64_resw>, <&amx64_subsd>, <&amx64_0xffff>;
            antecedents = <A R S N0>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64ea: am_x64_e_a {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_E_A";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&amx64_resd>, <&amx64_0xffffffff>;
            antecedents = <R N0>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64eg: am_x64_e_g {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_E_G";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&amx64_resq>, <&amx64_0xfffffffffffff>;
            antecedents = <R N0>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64se: am_x64_se {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_SE";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&amx64_syscall>;
            antecedents = <S>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64sec: am_x64_se_c {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_SE_C";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&none>;
            antecedents = <0x070100>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64sea: am_x64_se_a {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_SE_A";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&none>;
            antecedents = <0x070100>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64seg: am_x64_se_g {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_SE_G";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&none>;
            antecedents = <0x070100>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64nw: am_x64_nw {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_NW";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&amx64_extern>, <&amx64_imul>, <&amx64_loop>, <&amx64_not>, <&amx64_or>, <&amx64_ror>, <&amx64_sar>, <&amx64_100>, <&amx64_1001>;
            antecedents = <E I L N O R S COMMA SQT>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64nwc: am_x64_nw_c {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_NW_C";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&amx64_shr>;
            antecedents = <S>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64nwa: am_x64_nw_a {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_NW_A";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&none>;
            antecedents = <0x070100>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64nwg: am_x64_nw_g {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_NW_G";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&none>;
            antecedents = <0x070100>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64w: am_x64_w {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_W";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&amx64_divsd>, <&amx64_enter_0_0>, <&amx64_inc>, <&amx64_leave>, <&amx64_mov>, <&amx64_rol>, <&amx64_sal>, <&kp N0>, <&amx64_0>;
            antecedents = <D E I L M R S COMMA SQT>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64wc: am_x64_w_c {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_W_C";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&amx64_push_rbpmov_rbp>, <&amx64_mov_rsp_rbppop_>, <&amx64_movsd>, <&amx64_shl>;
            antecedents = <E L M S>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64wa: am_x64_w_a {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_W_A";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&none>;
            antecedents = <0x070100>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64wg: am_x64_w_g {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_W_G";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&none>;
            antecedents = <0x070100>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64sw: am_x64_sw {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_SW";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&amx64_idiv>, <&amx64_sqrtsd>;
            antecedents = <I S>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64swc: am_x64_sw_c {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_SW_C";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&none>;
            antecedents = <0x070100>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64swa: am_x64_sw_a {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_SW_A";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&none>;
            antecedents = <0x070100>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amx64swg: am_x64_sw_g {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_X64_SW_G";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&none>;
            antecedents = <0x070100>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
    };
    macros {
        // 'A'
        amx64_and: amx64_and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (a)nd     
            bindings = <&macro_tap &kp N &kp D &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        amx64_add: amx64_add {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (a)dd     
            bindings = <&macro_tap &kp D &kp D &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        amx64_addsd: amx64_addsd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (a)ddsd   
            bindings = <&macro_release &kp LCTRL>, <&macro_tap &kp D &kp D &kp S &kp D &kp SPACE &kp SPACE &kp SPACE>;
        };
        // 'B'
        amx64_byte: amx64_byte {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (b)yte
            bindings = <&macro_tap &kp Y &kp T &kp E>;
        };
        // 'C'
        amx64_call: amx64_call {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (c)all    
            bindings = <&macro_tap &kp A &kp L &kp L &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        // 'D'
        amx64_dword: amx64_dword {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (d)word
            bindings = <&macro_tap &kp W &kp O &kp R &kp D>;
        };
        amx64_dec: amx64_dec {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (d)ec     
            bindings = <&macro_tap &kp E &kp C &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        amx64_divsd: amx64_divsd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (d)ivsd   
            bindings = <&macro_tap &kp I &kp V &kp S &kp D &kp SPACE &kp SPACE &kp SPACE>;
        };
        // 'E'
        amx64_extern: amx64_extern {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (e)xtern 
            bindings = <&macro_tap &kp X &kp T &kp E &kp R &kp N &kp SPACE>;
        };
        amx64_enter_0_0: amx64_enter_0_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (e)nter   0, 0
            bindings = <&macro_tap &kp N &kp T &kp E &kp R &kp SPACE &kp SPACE &kp SPACE &kp N0 &kp COMMA &kp SPACE &kp N0>;
        };
        amx64_push_rbpmov_rbp: amx64_push_rbpmov_rbp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [e]push    rbp⏎mov     rbp, rsp
            bindings = <&macro_release &kp RCTRL>, <&macro_tap &kp BSPC &kp P &kp U &kp S &kp H &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp R &kp B &kp P &kp RET &kp M &kp O &kp V &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp R &kp B &kp P &kp COMMA &kp SPACE &kp R &kp S &kp P>;
        };
        // 'G'
        amx64_global: amx64_global {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (g)lobal 
            bindings = <&macro_tap &kp L &kp O &kp B &kp A &kp L &kp SPACE>;
        };
        // 'I'
        amx64_imul: amx64_imul {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (i)mul    
            bindings = <&macro_tap &kp M &kp U &kp L &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        amx64_inc: amx64_inc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (i)nc     
            bindings = <&macro_tap &kp N &kp C &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        amx64_idiv: amx64_idiv {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (i)div    
            bindings = <&macro_tap &kp D &kp I &kp V &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        // 'L'
        amx64_loop: amx64_loop {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (l)oop    
            bindings = <&macro_tap &kp O &kp O &kp P &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        amx64_leave: amx64_leave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (l)eave
            bindings = <&macro_tap &kp E &kp A &kp V &kp E>;
        };
        amx64_mov_rsp_rbppop_: amx64_mov_rsp_rbppop_ {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [l]mov     rsp, rbp⏎pop     rbp
            bindings = <&macro_release &kp RCTRL>, <&macro_tap &kp BSPC &kp M &kp O &kp V &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp R &kp S &kp P &kp COMMA &kp SPACE &kp R &kp B &kp P &kp RET &kp P &kp O &kp P &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp R &kp B &kp P>;
        };
        // 'M'
        amx64_mulsd: amx64_mulsd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (m)ulsd   
            bindings = <&macro_tap &kp U &kp L &kp S &kp D &kp SPACE &kp SPACE &kp SPACE>;
        };
        amx64_mov: amx64_mov {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (m)ov     
            bindings = <&macro_tap &kp O &kp V &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        amx64_movsd: amx64_movsd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (m)ovsd   
            bindings = <&macro_release &kp RCTRL>, <&macro_tap &kp O &kp V &kp S &kp D &kp SPACE &kp SPACE &kp SPACE>;
        };
        // 'N'
        amx64_not: amx64_not {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (n)ot     
            bindings = <&macro_tap &kp O &kp T &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        // 'O'
        amx64_or: amx64_or {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (o)r      
            bindings = <&macro_tap &kp R &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        // 'P'
        amx64_pop: amx64_pop {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (p)op     
            bindings = <&macro_tap &kp O &kp P &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        amx64_push: amx64_push {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (p)ush    
            bindings = <&macro_tap &kp U &kp S &kp H &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        // 'Q'
        amx64_qword: amx64_qword {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (q)word
            bindings = <&macro_tap &kp W &kp O &kp R &kp D>;
        };
        // 'R'
        amx64_resb: amx64_resb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (r)esb 
            bindings = <&macro_tap &kp E &kp S &kp B &kp SPACE>;
        };
        amx64_resw: amx64_resw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (r)esw 
            bindings = <&macro_release &kp LCTRL>, <&macro_tap &kp E &kp S &kp W &kp SPACE>;
        };
        amx64_resd: amx64_resd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (r)esd 
            bindings = <&macro_release &kp LALT>, <&macro_tap &kp LALT>, <&macro_tap &kp E &kp S &kp D &kp SPACE>;
        };
        amx64_resq: amx64_resq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (r)esq 
            bindings = <&macro_release &kp LGUI>, <&macro_tap &kp LGUI>, <&macro_tap &kp E &kp S &kp Q &kp SPACE>;
        };
        amx64_ror: amx64_ror {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (r)or     
            bindings = <&macro_tap &kp O &kp R &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        amx64_rol: amx64_rol {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (r)ol     
            bindings = <&macro_tap &kp O &kp L &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        // 'S'
        amx64_section: amx64_section {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (s)ection 
            bindings = <&macro_tap &kp E &kp C &kp T &kp I &kp O &kp N &kp SPACE>;
        };
        amx64_section_data: amx64_section_data {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (s)ection .data
            bindings = <&macro_release &kp LCTRL>, <&macro_tap &kp E &kp C &kp T &kp I &kp O &kp N &kp SPACE &kp DOT &kp D &kp A &kp T &kp A>;
        };
        amx64_section_text: amx64_section_text {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (s)ection .text
            bindings = <&macro_release &kp LALT>, <&macro_tap &kp LALT>, <&macro_tap &kp E &kp C &kp T &kp I &kp O &kp N &kp SPACE &kp DOT &kp T &kp E &kp X &kp T>;
        };
        amx64_section_bss: amx64_section_bss {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (s)ection .bss
            bindings = <&macro_release &kp LGUI>, <&macro_tap &kp LGUI>, <&macro_tap &kp E &kp C &kp T &kp I &kp O &kp N &kp SPACE &kp DOT &kp B &kp S &kp S>;
        };
        amx64_sub: amx64_sub {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (s)ub     
            bindings = <&macro_tap &kp U &kp B &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        amx64_subsd: amx64_subsd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (s)ubsd   
            bindings = <&macro_release &kp LCTRL>, <&macro_tap &kp U &kp B &kp S &kp D &kp SPACE &kp SPACE &kp SPACE>;
        };
        amx64_syscall: amx64_syscall {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (s)yscall 
            bindings = <&macro_tap &kp Y &kp S &kp C &kp A &kp L &kp L &kp SPACE>;
        };
        amx64_sar: amx64_sar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (s)ar     
            bindings = <&macro_tap &kp A &kp R &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        amx64_shr: amx64_shr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (s)hr     
            bindings = <&macro_release &kp RCTRL>, <&macro_tap &kp H &kp R &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        amx64_sal: amx64_sal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (s)al     
            bindings = <&macro_tap &kp A &kp L &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        amx64_shl: amx64_shl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (s)hl     
            bindings = <&macro_release &kp RCTRL>, <&macro_tap &kp H &kp L &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        amx64_sqrtsd: amx64_sqrtsd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (s)qrtsd  
            bindings = <&macro_tap &kp Q &kp R &kp T &kp S &kp D &kp SPACE &kp SPACE>;
        };
        // 'W'
        amx64_word: amx64_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (w)ord
            bindings = <&macro_tap &kp O &kp R &kp D>;
        };
        // 'X'
        amx64_xor: amx64_xor {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (x)or     
            bindings = <&macro_tap &kp O &kp R &kp SPACE &kp SPACE &kp SPACE &kp SPACE &kp SPACE>;
        };
        // '0'
        amx64_0xff: amx64_0xff {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (0)xff
            bindings = <&macro_tap &kp X &kp F &kp F>;
        };
        amx64_0xffff: amx64_0xffff {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (0)xffff
            bindings = <&macro_release &kp LCTRL>, <&macro_tap &kp X &kp F &kp F &kp F &kp F>;
        };
        amx64_0xffffffff: amx64_0xffffffff {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (0)xffffffff
            bindings = <&macro_release &kp LALT>, <&macro_tap &kp LALT>, <&macro_tap &kp X &kp F &kp F &kp F &kp F &kp F &kp F &kp F &kp F>;
        };
        amx64_0xfffffffffffff: amx64_0xfffffffffffff {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (0)xffffffffffffffff
            bindings = <&macro_release &kp LGUI>, <&macro_tap &kp LGUI>, <&macro_tap &kp X &kp F &kp F &kp F &kp F &kp F &kp F &kp F &kp F &kp F &kp F &kp F &kp F &kp F &kp F &kp F &kp F>;
        };
        // ','
        amx64_100: amx64_100 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (,)10,0
            bindings = <&macro_tap &kp N1 &kp N0 &kp COMMA &kp N0>;
        };
        // '''
        amx64_1001: amx64_1001 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // ('),10,0
            bindings = <&macro_tap &kp COMMA &kp N1 &kp N0 &kp COMMA &kp N0>;
        };
        amx64_0: amx64_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // ('),0
            bindings = <&macro_tap &kp COMMA &kp N0>;
        };
    };
};
