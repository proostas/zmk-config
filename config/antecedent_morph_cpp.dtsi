// Cpp schema version 1.4
// Automatically generated by ZMK Antecedent Morph Config Generator

/ {
    behaviors {
        // Base layer
        amcppne: am_cpp_north_east {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_CPP_NORTH_EAST";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&amcpp_for>, <&amcpp_private>, <&amcpp_break>, <&amcpp_long_double>, <&amcpp_unsigned>, <&amcpp_include>, <&amcpp_return>, <&amcpp_struct>, <&amcpp_template>, <&amcpp_module>, <&amcpp_null>, <&amcpp_enum>, <&amcpp_operator>, <&amcpp_extern>, <&amcpp_case>, <&amcpp_default>, <&amcpp_stdvector>, <&amcpp_ifdef>, <&amcpp_void1>, <&amcpp_void2>, <&amcpp_9>, <&amcpp_defined1>, <&amcpp_defined>;
            antecedents = <F P B L U APOS R S T M N E O X C D V FSLH LPAR STAR RPAR EXCL EQUAL>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amcppe: am_cpp_east {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_CPP_EAST";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&amcpp_while>, <&amcpp_float>, <&amcpp_public>, <&amcpp_bool>, <&amcpp_long_long>, <&amcpp_using>, <&amcpp_auto>, <&amcpp_return1>, <&amcpp_static>, <&amcpp_this>, <&amcpp_goto>, <&amcpp_stdmakeunique>, <&amcpp_nullptr>, <&amcpp_else_if>, <&amcpp_inline>, <&amcpp_stdoptional>, <&amcpp_explicit>, <&amcpp_const>, <&amcpp_double>, <&amcpp_void>, <&amcpp_catch>, <&amcpp_stdcout>, <&amcpp_stdcin>, <&amcpp_ifndef>, <&amcpp_6>, <&amcpp_7>, <&kp EQUAL>, <&kp SEMI>, <&kp SEMI>, <&amcpp_std>, <&kp EQUAL>, <&kp EQUAL>, <&kp EQUAL>, <&kp EQUAL>, <&amcpp_pragma_once>, <&kp EQUAL>, <&kp EQUAL>, <&amcpp_5>, <&kp SEMI>, <&amcpp_stdpair>, <&amcpp_stdtuple>, <&kp EQUAL>, <&amcpp_cpp_v14>;
            antecedents = <W F P B L U A R S T G M N E I O X C D V H COMMA DOT FSLH LBRC LPAR STAR RPAR RBRC COLON PRCNT CARET PLUS EXCL HASH PIPE AMPS LBKT RBKT N2 N3 MINUS SPACE>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amcppse: am_cpp_south_east {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_CPP_SOUTH_EAST";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&amcpp_final>, <&amcpp_protected>, <&amcpp_union>, <&amcpp_>, <&amcpp_register>, <&amcpp_signed>, <&amcpp_throw>, <&amcpp_mutable>, <&amcpp_0>, <&amcpp_elif>, <&amcpp_import>, <&amcpp_export>, <&amcpp_class>, <&amcpp_define>, <&amcpp_virtual>;
            antecedents = <F P U APOS R S T M N E I X C D V>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amcppsw: am_cpp_south_west {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_CPP_SOUTH_WEST";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&amcpp_using_namespace>, <&amcpp_1>, <&amcpp_sizeof>, <&amcpp_typedef>, <&amcpp_n>, <&amcpp_else>, <&amcpp_if>, <&amcpp_continue>, <&amcpp_endif>;
            antecedents = <U APOS S T N E I C DOT>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
        amcppnw: am_cpp_north_west {
            compatible = "zmk,behavior-antecedent-morph";
            label = "AM_CPP_NORTH_WEST";
            #binding-cells = <0>;
            defaults = <&none>;
            bindings = <&amcpp_friend>, <&amcpp_long>, <&amcpp_stduniqueptr>, <&amcpp_true>, <&amcpp_include1>, <&amcpp_switch>, <&amcpp_stdmove>, <&amcpp_false>, <&amcpp_else1>, <&amcpp_if1>, <&amcpp_override>, <&amcpp_constexpr>, <&amcpp_delete>, <&amcpp_volatile>, <&amcpp_char>, <&kp EQUAL>, <&kp EQUAL>, <&kp EQUAL>, <&amcpp_undef>;
            antecedents = <F L U Y APOS S M N E I O C D V H COMMA DOT FSLH SPACE>;
            max-delay-ms = <U_ANTMORPH_DELAY>;
        };
    };
    macros {
        amcpp_while: amcpp_while {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (w)hile (
            bindings = <&kp H &kp I &kp L &kp E &kp SPACE &kp LPAR>;
        };
        amcpp_for: amcpp_for {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (f)or (
            bindings = <&kp O &kp R &kp SPACE &kp LPAR>;
        };
        amcpp_float: amcpp_float {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (f)loat
            bindings = <&kp L &kp O &kp A &kp T>;
        };
        amcpp_final: amcpp_final {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (f)inal
            bindings = <&kp I &kp N &kp A &kp L>;
        };
        amcpp_friend: amcpp_friend {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (f)riend 
            bindings = <&kp R &kp I &kp E &kp N &kp D &kp SPACE>;
        };
        amcpp_private: amcpp_private {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (p)rivate
            bindings = <&kp R &kp I &kp V &kp A &kp T &kp E>;
        };
        amcpp_public: amcpp_public {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (p)ublic
            bindings = <&kp U &kp B &kp L &kp I &kp C>;
        };
        amcpp_protected: amcpp_protected {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (p)rotected
            bindings = <&kp R &kp O &kp T &kp E &kp C &kp T &kp E &kp D>;
        };
        amcpp_break: amcpp_break {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (b)reak;
            bindings = <&kp R &kp E &kp A &kp K &kp SEMI>;
        };
        amcpp_bool: amcpp_bool {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (b)ool
            bindings = <&kp O &kp O &kp L>;
        };
        amcpp_long_double: amcpp_long_double {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (l)ong double
            bindings = <&kp O &kp N &kp G &kp SPACE &kp D &kp O &kp U &kp B &kp L &kp E>;
        };
        amcpp_long_long: amcpp_long_long {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (l)ong long
            bindings = <&kp O &kp N &kp G &kp SPACE &kp L &kp O &kp N &kp G>;
        };
        amcpp_long: amcpp_long {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (l)ong
            bindings = <&kp O &kp N &kp G>;
        };
        amcpp_unsigned: amcpp_unsigned {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (u)nsigned
            bindings = <&kp N &kp S &kp I &kp G &kp N &kp E &kp D>;
        };
        amcpp_using: amcpp_using {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (u)sing 
            bindings = <&kp S &kp I &kp N &kp G &kp SPACE>;
        };
        amcpp_union: amcpp_union {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (u)nion 
            bindings = <&kp N &kp I &kp O &kp N &kp SPACE>;
        };
        amcpp_using_namespace: amcpp_using_namespace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (u)sing namespace 
            bindings = <&kp S &kp I &kp N &kp G &kp SPACE &kp N &kp A &kp M &kp E &kp S &kp P &kp A &kp C &kp E &kp SPACE>;
        };
        amcpp_stduniqueptr: amcpp_stduniqueptr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [u]std::unique_ptr<
            bindings = <&kp BSPC &kp S &kp T &kp D &kp COLON &kp COLON &kp U &kp N &kp I &kp Q &kp U &kp E &kp UNDER &kp P &kp T &kp R &kp LT>;
        };
        amcpp_true: amcpp_true {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [y]true
            bindings = <&kp BSPC &kp T &kp R &kp U &kp E>;
        };
        amcpp_include: amcpp_include {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [‘]#include “”←
            bindings = <&kp BSPC &kp HASH &kp I &kp N &kp C &kp L &kp U &kp D &kp E &kp SPACE &kp DQT &kp DQT &kp LEFT>;
        };
        amcpp_: amcpp_ {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [‘]\“
            bindings = <&kp BSPC &kp BSLH &kp DQT>;
        };
        amcpp_1: amcpp_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [‘]\’
            bindings = <&kp BSPC &kp BSLH &kp APOS>;
        };
        amcpp_include1: amcpp_include1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [‘]#include <>←
            bindings = <&kp BSPC &kp HASH &kp I &kp N &kp C &kp L &kp U &kp D &kp E &kp SPACE &kp LT &kp GT &kp LEFT>;
        };
        amcpp_auto: amcpp_auto {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (a)uto
            bindings = <&kp U &kp T &kp O>;
        };
        amcpp_return: amcpp_return {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (r)eturn;
            bindings = <&kp E &kp T &kp U &kp R &kp N &kp SEMI>;
        };
        amcpp_return1: amcpp_return1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (r)eturn 
            bindings = <&kp E &kp T &kp U &kp R &kp N &kp SPACE>;
        };
        amcpp_register: amcpp_register {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (r)egister
            bindings = <&kp E &kp G &kp I &kp S &kp T &kp E &kp R>;
        };
        amcpp_struct: amcpp_struct {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (s)truct 
            bindings = <&kp T &kp R &kp U &kp C &kp T &kp SPACE>;
        };
        amcpp_static: amcpp_static {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (s)tatic 
            bindings = <&kp T &kp A &kp T &kp I &kp C &kp SPACE>;
        };
        amcpp_signed: amcpp_signed {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (s)igned
            bindings = <&kp I &kp G &kp N &kp E &kp D>;
        };
        amcpp_sizeof: amcpp_sizeof {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (s)izeof
            bindings = <&kp I &kp Z &kp E &kp O &kp F>;
        };
        amcpp_switch: amcpp_switch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (s)witch (
            bindings = <&kp W &kp I &kp T &kp C &kp H &kp SPACE &kp LPAR>;
        };
        amcpp_template: amcpp_template {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (t)emplate 
            bindings = <&kp E &kp M &kp P &kp L &kp A &kp T &kp E &kp SPACE>;
        };
        amcpp_this: amcpp_this {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (t)his
            bindings = <&kp H &kp I &kp S>;
        };
        amcpp_throw: amcpp_throw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (t)hrow 
            bindings = <&kp H &kp R &kp O &kp W &kp SPACE>;
        };
        amcpp_typedef: amcpp_typedef {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (t)ypedef 
            bindings = <&kp Y &kp P &kp E &kp D &kp E &kp F &kp SPACE>;
        };
        amcpp_goto: amcpp_goto {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (g)oto 
            bindings = <&kp O &kp T &kp O &kp SPACE>;
        };
        amcpp_module: amcpp_module {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (m)odule
            bindings = <&kp O &kp D &kp U &kp L &kp E>;
        };
        amcpp_stdmakeunique: amcpp_stdmakeunique {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [m]std::make_unique<>(
            bindings = <&kp BSPC &kp S &kp T &kp D &kp COLON &kp COLON &kp M &kp A &kp K &kp E &kp UNDER &kp U &kp N &kp I &kp Q &kp U &kp E &kp LT &kp GT &kp LPAR>;
        };
        amcpp_mutable: amcpp_mutable {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (m)utable 
            bindings = <&kp U &kp T &kp A &kp B &kp L &kp E &kp SPACE>;
        };
        amcpp_stdmove: amcpp_stdmove {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [m]std::move(
            bindings = <&kp BSPC &kp S &kp T &kp D &kp COLON &kp COLON &kp M &kp O &kp V &kp E &kp LPAR>;
        };
        amcpp_null: amcpp_null {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (n)ULL
            bindings = <&kp LS(U) &kp LS(L) &kp LS(L)>;
        };
        amcpp_nullptr: amcpp_nullptr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (n)ullptr
            bindings = <&kp U &kp L &kp L &kp P &kp T &kp R>;
        };
        amcpp_0: amcpp_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [n]\0
            bindings = <&kp BSPC &kp BSLH &kp N0>;
        };
        amcpp_n: amcpp_n {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [n]\n
            bindings = <&kp BSPC &kp BSLH &kp N>;
        };
        amcpp_false: amcpp_false {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [n]false
            bindings = <&kp BSPC &kp F &kp A &kp L &kp S &kp E>;
        };
        amcpp_enum: amcpp_enum {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (e)num 
            bindings = <&kp N &kp U &kp M &kp SPACE>;
        };
        amcpp_else_if: amcpp_else_if {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (e)lse if (
            bindings = <&kp L &kp S &kp E &kp SPACE &kp I &kp F &kp SPACE &kp LPAR>;
        };
        amcpp_elif: amcpp_elif {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [e]#elif 
            bindings = <&kp BSPC &kp HASH &kp E &kp L &kp I &kp F &kp SPACE>;
        };
        amcpp_else: amcpp_else {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [e]#else
            bindings = <&kp BSPC &kp HASH &kp E &kp L &kp S &kp E>;
        };
        amcpp_else1: amcpp_else1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (e)lse
            bindings = <&kp L &kp S &kp E>;
        };
        amcpp_inline: amcpp_inline {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (i)nline 
            bindings = <&kp N &kp L &kp I &kp N &kp E &kp SPACE>;
        };
        amcpp_import: amcpp_import {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (i)mport 
            bindings = <&kp M &kp P &kp O &kp R &kp T &kp SPACE>;
        };
        amcpp_if: amcpp_if {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [i]#if 
            bindings = <&kp BSPC &kp HASH &kp I &kp F &kp SPACE>;
        };
        amcpp_if1: amcpp_if1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (i)f (
            bindings = <&kp F &kp SPACE &kp LPAR>;
        };
        amcpp_operator: amcpp_operator {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (o)perator
            bindings = <&kp P &kp E &kp R &kp A &kp T &kp O &kp R>;
        };
        amcpp_stdoptional: amcpp_stdoptional {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [o]std::optional<
            bindings = <&kp BSPC &kp S &kp T &kp D &kp COLON &kp COLON &kp O &kp P &kp T &kp I &kp O &kp N &kp A &kp L &kp LT>;
        };
        amcpp_override: amcpp_override {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (o)verride
            bindings = <&kp V &kp E &kp R &kp R &kp I &kp D &kp E>;
        };
        amcpp_extern: amcpp_extern {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [x]extern 
            bindings = <&kp BSPC &kp E &kp X &kp T &kp E &kp R &kp N &kp SPACE>;
        };
        amcpp_explicit: amcpp_explicit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [x]explicit
            bindings = <&kp BSPC &kp E &kp X &kp P &kp L &kp I &kp C &kp I &kp T>;
        };
        amcpp_export: amcpp_export {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [x]export 
            bindings = <&kp BSPC &kp E &kp X &kp P &kp O &kp R &kp T &kp SPACE>;
        };
        amcpp_case: amcpp_case {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (c)ase 
            bindings = <&kp A &kp S &kp E &kp SPACE>;
        };
        amcpp_const: amcpp_const {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (c)onst
            bindings = <&kp O &kp N &kp S &kp T>;
        };
        amcpp_class: amcpp_class {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (c)lass 
            bindings = <&kp L &kp A &kp S &kp S &kp SPACE>;
        };
        amcpp_continue: amcpp_continue {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (c)ontinue;
            bindings = <&kp O &kp N &kp T &kp I &kp N &kp U &kp E &kp SEMI>;
        };
        amcpp_constexpr: amcpp_constexpr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (c)onstexpr
            bindings = <&kp O &kp N &kp S &kp T &kp E &kp X &kp P &kp R>;
        };
        amcpp_default: amcpp_default {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (d)efault
            bindings = <&kp E &kp F &kp A &kp U &kp L &kp T>;
        };
        amcpp_double: amcpp_double {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (d)ouble
            bindings = <&kp O &kp U &kp B &kp L &kp E>;
        };
        amcpp_define: amcpp_define {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [d]#define 
            bindings = <&kp BSPC &kp HASH &kp D &kp E &kp F &kp I &kp N &kp E &kp SPACE>;
        };
        amcpp_delete: amcpp_delete {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (d)elete
            bindings = <&kp E &kp L &kp E &kp T &kp E>;
        };
        amcpp_stdvector: amcpp_stdvector {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [v]std::vector<
            bindings = <&kp BSPC &kp S &kp T &kp D &kp COLON &kp COLON &kp V &kp E &kp C &kp T &kp O &kp R &kp LT>;
        };
        amcpp_void: amcpp_void {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (v)oid
            bindings = <&kp O &kp I &kp D>;
        };
        amcpp_virtual: amcpp_virtual {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (v)irtual 
            bindings = <&kp I &kp R &kp T &kp U &kp A &kp L &kp SPACE>;
        };
        amcpp_volatile: amcpp_volatile {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (v)olatile
            bindings = <&kp O &kp L &kp A &kp T &kp I &kp L &kp E>;
        };
        amcpp_catch: amcpp_catch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [h]catch (
            bindings = <&kp BSPC &kp C &kp A &kp T &kp C &kp H &kp SPACE &kp LPAR>;
        };
        amcpp_char: amcpp_char {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [h]char
            bindings = <&kp BSPC &kp C &kp H &kp A &kp R>;
        };
        amcpp_stdcout: amcpp_stdcout {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [,]std::cout
            bindings = <&kp BSPC &kp S &kp T &kp D &kp COLON &kp COLON &kp C &kp O &kp U &kp T>;
        };
        amcpp_stdcin: amcpp_stdcin {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [.]std::cin
            bindings = <&kp BSPC &kp S &kp T &kp D &kp COLON &kp COLON &kp C &kp I &kp N>;
        };
        amcpp_endif: amcpp_endif {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [.]#endif
            bindings = <&kp BSPC &kp HASH &kp E &kp N &kp D &kp I &kp F>;
        };
        amcpp_ifdef: amcpp_ifdef {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [/]#ifdef 
            bindings = <&kp BSPC &kp HASH &kp I &kp F &kp D &kp E &kp F &kp SPACE>;
        };
        amcpp_ifndef: amcpp_ifndef {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [/]#ifndef 
            bindings = <&kp BSPC &kp HASH &kp I &kp F &kp N &kp D &kp E &kp F &kp SPACE>;
        };
        amcpp_6: amcpp_6 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // ({)}←
            bindings = <&kp RBRC &kp LEFT>;
        };
        amcpp_void1: amcpp_void1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (()void)
            bindings = <&kp V &kp O &kp I &kp D &kp RPAR>;
        };
        amcpp_7: amcpp_7 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (())←
            bindings = <&kp RPAR &kp LEFT>;
        };
        amcpp_void2: amcpp_void2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [*]void *
            bindings = <&kp BSPC &kp V &kp O &kp I &kp D &kp SPACE &kp STAR>;
        };
        amcpp_9: amcpp_9 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // ()) {⏎
            bindings = <&kp SPACE &kp LBRC &kp RET>;
        };

        amcpp_std: amcpp_std {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [:]std::
            bindings = <&kp BSPC &kp S &kp T &kp D &kp COLON &kp COLON>;
        };



        amcpp_defined1: amcpp_defined1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (!)defined(
            bindings = <&kp D &kp E &kp F &kp I &kp N &kp E &kp D &kp LPAR>;
        };
        amcpp_pragma_once: amcpp_pragma_once {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // (#)pragma once
            bindings = <&kp P &kp R &kp A &kp G &kp M &kp A &kp SPACE &kp O &kp N &kp C &kp E>;
        };


        amcpp_5: amcpp_5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // ([)]←
            bindings = <&kp RBKT &kp LEFT>;
        };

        amcpp_defined: amcpp_defined {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [=]defined(
            bindings = <&kp BSPC &kp D &kp E &kp F &kp I &kp N &kp E &kp D &kp LPAR>;
        };
        amcpp_stdpair: amcpp_stdpair {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [2]std::pair<
            bindings = <&kp BSPC &kp S &kp T &kp D &kp COLON &kp COLON &kp P &kp A &kp I &kp R &kp LT>;
        };
        amcpp_stdtuple: amcpp_stdtuple {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [3]std::tuple<
            bindings = <&kp BSPC &kp S &kp T &kp D &kp COLON &kp COLON &kp T &kp U &kp P &kp L &kp E &kp LT>;
        };

        amcpp_cpp_v14: amcpp_cpp_v14 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [ ]Cpp v1.4
            bindings = <&kp BSPC &kp LS(C) &kp P &kp P &kp SPACE &kp V &kp N1 &kp DOT &kp N4>;
        };
        amcpp_undef: amcpp_undef {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <U_ANTMORPH_MACRO_WAIT>;
            tap-ms = <U_ANTMORPH_MACRO_TAP>;
            // [ ]#undef 
            bindings = <&kp BSPC &kp HASH &kp U &kp N &kp D &kp E &kp F &kp SPACE>;
        };
    };
};
